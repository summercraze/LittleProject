public class Foothill
{
   public static void main (String[] args)
   {
      int k;
      Student student;

      Student[] myClass = { new Student("smith","fred", 95), 
         new Student("bauer","jack",123),
         new Student("jacobs","carrie", 195), 
         new Student("renquist","abe",148),
         new Student("3ackson","trevor", 108), 
         new Student("perry","fred",225),
         new Student("loceff","fred", 44), 
         new Student("stollings","pamela",452),
         new Student("charters","rodney", 295), 
         new Student("cassar","john",321),
      };

      // instantiate a StudArrUtilObject
      StudentArrayUtilities myStuds = new StudentArrayUtilities();

      // we can add stdunts manually and individually
      myStuds.addStudent( new Student("bartman", "petra", 102) );
      myStuds.addStudent( new Student("charters","rodney", 295));

      //check for empty array
      if (myStuds.addStudent(null) == false)
         System.out.println( "Error:Array Empty!\n");

      // if we happen to have an array available, we can add students in loop.
      for (k = 0; k < myClass.length; k++)
         myStuds.addStudent( myClass[k] );

      System.out.println( myStuds.toString("Before: "));

      myStuds.arraySort();
      System.out.println( myStuds.toString("Sorting by default: "));

      Student.setSortKey(Student.SORT_BY_FIRST);
      myStuds.arraySort();
      System.out.println( myStuds.toString("Sorting by first name: "));

      Student.setSortKey(Student.SORT_BY_POINTS);
      myStuds.arraySort();
      System.out.println( myStuds.toString("Sorting by total points: "));

      // test median
      System.out.println("Median of evenClass = "
         +  myStuds.getMedianDestructive() + "\n");

      // various tests of removing and adding too many students
      for (k = 0; k < 100; k++)
      {
         if ( (student = myStuds.removeStudent()) != null)
            System.out.println("Removed " + student);
         else
         {
            System.out.println("Empty after " + k + " removes.");
            break;
         }
      }

      for (k = 0; k < 100; k++)
      {
         if (!myStuds.addStudent(new Student("first", "last", 22)))
         {
            System.out.println("Full after " + k + " adds.");
            break;
         }
      }

   }
}

class Student
{
   private String lastName;
   private String firstName;
   private int totalPoints;

   public static final String DEFAULT_NAME = "zz-error";
   public static final int DEFAULT_POINTS = 0;
   public static final int MAX_POINTS = 1000;
   public static final int SORT_BY_FIRST = 88;
   public static final int SORT_BY_LAST = 98;
   public static final int SORT_BY_POINTS = 108;
   private static int sortKey = SORT_BY_LAST;

   // constructor requires parameters - no default supplied
   public Student( String last, String first, int points)
   {
      if ( ! setLastName(last) )
         lastName = DEFAULT_NAME;
      if ( ! setFirstName(first) )
         firstName = DEFAULT_NAME;
      if ( ! setPoints(points) )
         totalPoints = DEFAULT_POINTS;   
   }
   public static boolean setSortKey(int key)
   {
      if (! validSortKey(key))
         return false;
      sortKey = key;
      return true;
   }

   public String getLastName() { return lastName; }
   public String getFirstName() { return firstName; } 
   public int getTotalPoints() { return totalPoints; }
   static int getSortKey() {return sortKey;}

   public boolean setLastName(String last)
   {
      if ( ! validString(last) )
         return false;
      lastName = last;
      return true;
   }

   public boolean setFirstName(String first)
   {
      if ( ! validString(first) )
         return false;
      firstName = first;
      return true;
   }

   public boolean setPoints(int pts)
   {
      if ( ! validPoints(pts) )
         return false;
      totalPoints = pts;
      return true;
   }

   // could be an instance method and, if so, would take one parameter
   public static int compareTwoStudents( Student firstStud, Student secondStud)
   {
      int result = 0;

      if (sortKey == SORT_BY_LAST)
         result = firstStud.getFirstName().
          compareToIgnoreCase(secondStud.getFirstName());
      else if (sortKey == SORT_BY_FIRST)
         result = firstStud.getLastName().
          compareToIgnoreCase(secondStud.getLastName());
      else 
         result = firstStud.getTotalPoints() - secondStud.getTotalPoints();
      return result;
   }

   public String toString()
   {
      String resultString;

      resultString = " " + lastName 
         + ", " + firstName
         + " points: " + totalPoints
         + "\n";
      return resultString;
   }

   private static boolean validString( String testStr )
   {
      if (testStr != null && Character.isLetter(testStr.charAt(0)))
         return true;
      return false;
   }

   private static boolean validPoints( int testPoints )
   {
      if (testPoints >= 0 && testPoints <= MAX_POINTS)
         return true;
      return false;
   }
   private static boolean validSortKey(int key)
   {
      if (key != SORT_BY_FIRST && key != SORT_BY_LAST && key != SORT_BY_POINTS)
         return false;
      return true;
   }
}

class StudentArrayUtilities
{
   public static final int MAX_STUDENTS = 20;
   private Student[] theArray;
   private int numStudent;

   public StudentArrayUtilities()
   {
      numStudent = 0;
      theArray = new Student[MAX_STUDENTS];
   }
   public boolean addStudent(Student stud)
   {
      if (numStudent >= MAX_STUDENTS || stud == null)
         return false;
      theArray[numStudent++] = stud;
      return true;
   }
   public Student removeStudent()
   {
      if (numStudent  == 0)
         return null;
      else  
         return theArray[--numStudent];
   }

   // print the array with string as a title for the message box
   // this is somewhat controversial - we may or may not want an I/O
   // methods in this class.  we'll accept it today
   public String toString(String title)
   {
      String output = title + "\n";

      // build the output string from the individual Students:
      for (int k = 0; k < numStudent; k++)
         output += " " + theArray[k].toString();

      // now put it in a JOptionPane
      return output;
   }

   // returns true if a modification was made to the array
   private  boolean floatLargestToTop(int top)
   {
      boolean changed = false;
      Student temp;

      // compare with client call to see where the loop stops
      for (int k = 0; k < top; k++)
         if ( Student.compareTwoStudents(theArray[k], theArray[k+1]) > 0 )
         {
            temp = theArray[k];
            theArray[k] = theArray[k+1];
            theArray[k+1] = temp;
            changed = true;
         }
      return changed;
   }

   // public callable arraySort() - assumes Student class has a compareTo()
   public void arraySort()
   {
      for (int k = 0; k < numStudent; k++)
         // compare with method def to see where inner loop stops
         if ( !floatLargestToTop(numStudent-1) )
            return;
   }
   public double getMedianDestructive()
   { 
      int clientSortKey = 0;
      double result = 0;
      int numberOneEven = 0,numberTwoEven = 0,numberOneOdd = 0;
      final int EVEN_ARRAY_MIN_LENGTH = 2;
      final int EVEN_ODD_ARRAY_DETERMINATOR = 2;
      final int MID_ARRAY_DETERMINATOR = 2;
      final double AVERAGE = 2.0;
      if (numStudent == 0)
         return 0;
      if ( numStudent == 1)
         return theArray[0].getTotalPoints();

      clientSortKey = Student.getSortKey();   
      Student.setSortKey(Student.SORT_BY_POINTS);
      arraySort();
      
      if (numStudent % EVEN_ODD_ARRAY_DETERMINATOR == 0 
         && numStudent >= EVEN_ARRAY_MIN_LENGTH)
      {
         numberOneEven = numStudent / MID_ARRAY_DETERMINATOR;
         numberTwoEven = numberOneEven - 1;
         result = (theArray[numberOneEven].getTotalPoints()
            + theArray[numberTwoEven].getTotalPoints()) / AVERAGE;
      }
      else 
      {
         numberOneOdd = ((numStudent + 1) / MID_ARRAY_DETERMINATOR) - 1;
         result = theArray[numberOneOdd].getTotalPoints();
      }

      Student.setSortKey(clientSortKey);
      return result;
   }
}
